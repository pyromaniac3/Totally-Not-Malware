chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'getExtensionID') {
        const extensionID = chrome.runtime.id;
        sendResponse(extensionID);
    }
});
onactivate = (event) => {console.log("Service worker activated!")};

let hunger = 0
let attention = 0
let WILL_KNOCK = false;
const position = {
    x: 0,
    y: 0,
};

// STATS
function updateStats() {
  if (hunger >= 10 || attention >= 10) {
    hunger += 10
    attention += 10
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.tabs.sendMessage(tabs[0].id, {addHunger: 10, addAttention: 10, action: 'updateStats'}, function(response) {
      });
    });
  } else {
    if (hunger < 10) {
      attention += 10
      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
        chrome.tabs.sendMessage(tabs[0].id, {addHunger: 0, addAttention: 10, action: 'updateStats'}, function(response) {
        });
      });
    }
    if (attention < 10) {
      hunger += 10
      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
        chrome.tabs.sendMessage(tabs[0].id, {addHunger: 10, addAttention: 0, action: 'updateStats'}, function(response) {
        });
      });
    }
  }
  
}
setInterval(updateStats, 30000)

// repositioning cat every 3 seconds
setInterval(() => {
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.tabs.sendMessage(tabs[0].id, {action: 'RepositionCat'}, function(response) {
        console.log('sent repo Cat Pulse');
      });
    });
}, 3000);

  // event listener for chaning tabs
chrome.tabs.onActivated.addListener(function(activeInfo) {
    // activeInfo contains information about the newly activated tab
    // You can execute your function here
    console.log("New tab focused:", activeInfo.tabId);
    // Call your function here
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
        chrome.tabs.sendMessage(tabs[0].id, {newPos: position, newHunger: hunger, newAttention: attention, action: 'newTab'}, function(response) {
            console.log('new tabs position:' + response.result.x + '/' + response.result.y);
        });
    });
});
  
chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {
    if (message.type === "positionMovement") {
      // Log the received message
      //console.log("Message from content script:", message.data);
      position.x = message.data.x;
      position.y = message.data.y;
      
      // Optionally, send a response back to the content script
      sendResponse({ received: true });
    } else if (message.type === "addHunger") {
      hunger += message.data;

    } else if (message.type === "addAttention") {
      attention += attention.data;
      
    }
});