// Starter code provided by https://github.com/tanhauhau/browser-pet/tree/master
const position = {
    x: 0,
    y: 0,
};
let isSwatting = false;
function updatePosition(pet, x, y) {
    pet.style.left = (position.x = x) + 'px';
    pet.style.top = (position.y = y) + 'px';
}

function random(max) {
  return Math.floor(Math.random() * max);
}
function lerp(start, end, amt) {
  const lerpedX = (1 - amt) * start.x + amt * end.x;
  const lerpedY = (1 - amt) * start.y + amt * end.y;
  return { x: lerpedX, y: lerpedY };
}

function repositionPet(pet) {
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;

  // Calculate random positions within the screen dimensions
  const newPosition = { x: random(screenWidth), y: random(screenHeight) };
  const oldPosition = { x: position.x, y: position.y };

  let i = 0;
  const interval = setInterval(() => {
      const lerpedPosition = lerp(oldPosition, newPosition, i);
      updatePosition(pet, lerpedPosition.x, lerpedPosition.y);
      i += 0.02; // Adjust the step value 

      if (i >= 1) {
          clearInterval(interval);
      }
  }, 16); // Adjust the interval (in milliseconds)
}
function onload() {
    // Attach event listener directly to the play button
    const playButton = document.getElementById('playMe');
    playButton.addEventListener('click', () => {
        // Add toy to mouse cursor position when "Play" button is clicked
        document.addEventListener('click', addToyToMouse);
    });

    const pet = document.createElement('div');
    pet.classList.add('meowware-pet');
    document.body.appendChild(pet);

    // Randomly reposition the pet every few seconds
    setInterval(() => {
      repositionPet(pet);
    }, 3000); // Adjust the interval (in milliseconds) as needed


    // Creating a second div to be able to Ctrl+F in DOM.
    const identifier_div = document.createElement('div');
    identifier_div.classList.add('meowware-pet');
    pet.appendChild(identifier_div);

    textEles = textNodesUnder(document);
    //feedMeText(textEles);
    //eatAllTextPage(textEles);
    //eatEntirePage();
    console.log("Attached identifier to be able to more easily attach.")
}
window.addEventListener('load', onload);

function textNodesUnder(el) {
    const children = []; // Type: Node[]
    const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);
    while(walker.nextNode()) {
        console.log("1");
        children.push(walker.currentNode);
        //walker.textContent = 'FEED ME';
    }
    return children
}

// function that changes all the text on screen to "FEED ME"
function feedMeText(texts) {
    console.log("FEED ME");
    texts.forEach(element => {
        if (element.textContent != "\n") element.textContent = "FEED ME";
    });
}

// function that removes text from a specific element
function eatTextInElement(ele) {
    element.textContent = "\n"
}

// function that eats the entire page
function eatAllText(texts) {
    texts.forEach(element => {
        element.textContent = "\n";
    });
}

function eatEntirePage() {
    document.querySelectorAll('*').forEach(element => {
        element.remove();
    });
}

document.addEventListener('mousemove', function(e) {
    const mouseX = e.clientX; // Mouse position X
    const mouseY = e.clientY; // Mouse position Y
    checkSwat(mouseX, mouseY);
    });
    
function checkSwat(mouseX, mouseY) {
    const swatRange = 50;
    const distance = Math.sqrt(Math.pow(mouseX - position.x, 2) + Math.pow(mouseY - position.y, 2));
    if (distance < swatRange && !isSwatting) {
        startSwatting();
    } else if (distance >= swatRange && isSwatting) {
        stopSwatting();
    }
}
    
function startSwatting() {
    const pet = document.querySelector('.meowware-pet');
    pet.classList.add('meowware-pet-swat');
    isSwatting = true;
}
    
function stopSwatting() {
    const pet = document.querySelector('.meowware-pet');
    pet.classList.remove('meowware-pet-swat');
    isSwatting = false;
}

function moveToyWithCursor(event) {
    // Check if the toy element exists
    const toy = document.querySelector('.toy');
    if (!toy) {
        console.log("Toy element not found.");
        return;
    }

    // Update the position of the toy based on the cursor position
    toy.style.left = `${event.clientX}px`;
    toy.style.top = `${event.clientY}px`;
}


// Flag to see if the toy is locked onto the cursor or not
let isToyLocked = false;

// Add toy to the mouse cursor position
function addToyToMouse(event) {
    // Check if toys present
    const existingToy = document.querySelector('.toy');
    if (existingToy) {
        // Remove toy if present
        existingToy.remove();
        return;
    }

    const toy = document.createElement('div');
    toy.classList.add('toy');
    toy.style.position = 'absolute';
    toy.style.left = `${event.clientX}px`;
    toy.style.top = `${event.clientY}px`;
    toy.style.width = '20px'; 
    toy.style.height = '20px'; 
    toy.style.borderRadius = '50%';
    toy.style.backgroundColor = 'red'; 

    document.body.appendChild(toy);

    // Toggle the flag to lock/unlock the toy onto the cursor
    isToyLocked = !isToyLocked;

    // Move the cat towards the toy
    moveCatTowardsToy();
}

document.addEventListener('DOMContentLoaded', function() {
    // Access the play button element
    const playButton = document.getElementById('playMe');

    // Add event listener for the play button
    playButton.addEventListener('click', () => {
        // Toggle the flag to lock/unlock the toy onto the cursor
        isToyLocked = !isToyLocked;
    });

    // Add event listener for document click to add toy to mouse cursor position
    document.addEventListener('click', (event) => {
        if (isToyLocked) {
            addToyToMouse(event);
        }
    });

    // Add event listener for mousemove when the toy is locked
    document.addEventListener('mousemove', (event) => {
        if (isToyLocked) {
            moveToyWithCursor(event);
        }
    });
});

// Function to calculate distance between two points
function calculateDistance(point1, point2) {
    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
}

function moveCatTowardsToy() {
    const pet = document.querySelector('.meowware-pet');
    const toy = document.querySelector('.toy');

    // Check if the toy exists
    if (!toy) {
        console.log("Toy element not found.");
        return;
    }

    const petPosition = {
        x: position.x + pet.offsetLeft,
        y: position.y + pet.offsetTop
    };
    const toyPosition = {
        x: toy.offsetLeft,
        y: toy.offsetTop
    };

    const distance = calculateDistance(petPosition, toyPosition);

    // Find the angle between the pet and the toy
    const angle = Math.atan2(toyPosition.y - petPosition.y, toyPosition.x - petPosition.x);

    // Move the pet towards the toy by a certain distance (adjust as needed)
    const step = 2;
    const newX = petPosition.x + step * Math.cos(angle);
    const newY = petPosition.y + step * Math.sin(angle);

    // If the pet is close enough to the toy, play with it
    if (distance <= 50) {
        // Update the position of the pet to be directly on top of the toy
        updatePosition(pet, toyPosition.x - position.x, toyPosition.y - position.y);
        // Delete the toy
        toy.remove();
        console.log("The toy has been played with!");
    } else {
        // Update the position of the pet
        updatePosition(pet, newX - position.x, newY - position.y);
        // Continue moving the cat towards the toy
        requestAnimationFrame(moveCatTowardsToy);
    }
}
