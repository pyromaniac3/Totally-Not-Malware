// Starter code provided by https://github.com/tanhauhau/browser-pet/tree/master
let hunger = 0
let attention = 0
let WILL_KNOCK = false;
let canMove = true;
const position = {
    x: 0,
    y: 0,
};
let isSwatting = false;
let isExtensionPopup = false;
let isMoving = false;

//#region ONLOAD
function onload() {
  // check if we are in the extension popup or the webpage
  if (document.getElementById("Meow-Ware System") != null) {
    isExtensionPopup = true;
  }
  console.log("isExtension: " + isExtensionPopup);
  if (isExtensionPopup) {
    // if we're in the popup, setup the buttons and then end the onload
    document.getElementById('feedMe').addEventListener('click', function() {
      chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
        chrome.tabs.sendMessage(tabs[0].id, {action: 'feedCat'}, function(response) {
          console.log('sent Feed Cat Pulse');
        });
      });
    });
    document.getElementById('playMe').addEventListener('click', function() {
      if (attention >= 10) {
        attention -= 10;
      }
      console.log('Play Button clicked!');
    });
    document.getElementById('fakeQuit').addEventListener('click', function() {
      console.log('Fake Quit Button clicked!');
    });
    document.getElementById('feedMe').addEventListener('click', function() {
      console.log('Feed Button clicked!');
      spawnFood(food, pet);
    });

    
    
    return;
  }
  //create pet
    const pet = document.createElement('div');
    pet.classList.add('meowware-pet-idleStand');
    document.body.appendChild(pet);
    updatePosition(pet,50,50);

  //create food
  const food = document.createElement('div');
  food.classList.add('meowware-food');
  
  // listner for simple button requests
  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.action === 'feedCat') {
      console.log("Feed Cat Received");
      spawnFood(food,pet);
      sendResponse({result: 'Cat fed successfully'});
    } else if (request.action === 'RepositionCat') {

      console.log("Reposition Cat");
      if(canMove){
        repositionPet(pet,"meowware-pet-walk");
      }
      sendResponse({result: 'Cat repositioned successfully'});
    }
  });

  setInterval(() => {
    scratchScreen(pet);
  }, 10000);

  // listener for information communication
  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.action === 'newTab') {
      console.log("newTab, moving cat to: " +(request.newPos).x + "/" + (request.newPos).y);
      isMoving = false;
      updatePosition(pet,(request.newPos).x,(request.newPos).y)
      sendResponse({result: position});
    }
  });
  // Check if we should play a knock every 30 seconds.
  setInterval(() => {
    check_if_knock();
  }, 30000);
  
  // Check if we should zoom
  setInterval(() => {
    startZoom();
  }, 30000);
  

  pet.classList.add('allow="autoplay"');

  // Creating a second div to be able to Ctrl+F in DOM.
  // const identifier_div = document.createElement('div');
  // identifier_div.classList.add('meowware-pet');
  // pet.appendChild(identifier_div);

  textEles = textNodesUnder(document);
  setInterval(() => {
    if (hunger > 80) {
      feedMeText(textEles);
    }
  }, 10);
  //eatAllTextPage(textEles);
  //eatEntirePage();
  
  console.log("Attached identifier to be able to more easily attach.")
  
  setInterval(updateStats, 30000)
/*
   // Attach event listener directly to the play button
   const playButton = document.getElementById('playMe');
   playButton.addEventListener('click', () => {
       // Add toy to mouse cursor position when "Play" button is clicked
       document.addEventListener('click', addToyToMouse);
   });

  console.log("Attached identifier to be able to more easily attach.")

  //#region --------------- MENU BUTTONS ------------------------
  document.getElementById('feedMe').addEventListener('click', function() {
      if (hunger >= 10) {
        hunger -= 10;
      }
      console.log('Feed Button clicked!');
      spawnFood(food, pet);
      canMove = false;
    });
  document.getElementById('playMe').addEventListener('click', function() {
      if (attention >= 10) {
        attention -= 10;
      }
      console.log('Play Button clicked!');
    });
  document.getElementById('fakeQuit').addEventListener('click', function() {
      console.log('Fake Quit Button clicked!');
    });
  //#endregion
  // END MENU BUTTONS
  */
} 
window.addEventListener('load', onload);

//#endregion
// END OF ONLOAD FUNCTION

//#region ---------------- POSITION/MOVING -------------------
function updatePosition(pet, x, y) {
  pet.style.left = (position.x = x) + 'px';
  pet.style.top = (position.y = y) + 'px';
  chrome.runtime.sendMessage({ type: "positionMovement", data: position }, function(response) {
    //console.log("Response from background script:", response);
  });
}

function random(max) {
  return Math.floor(Math.random() * max);
}

function flip(pet, newPosition,oldPosition){
    if(newPosition.x>oldPosition.x){
      pet.style.transform = "scaleX(-1)";
    }else{
      pet.style.transform = "scaleX(1)";
    }
}

// Makes the Cat Walk
function repositionPet(pet, animationClass) {
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;

  // Calculate random positions within the screen dimensions
  const newPosition = { x: random(screenWidth), y: random(screenHeight) };
  const oldPosition = { x: position.x, y: position.y };

  // flips cat to face the correct direction when it walks
  flip(pet,newPosition,oldPosition);

  let i = 0;
  isMoving = true;
  const interval = setInterval(() => {
      const lerpedPosition = lerp(oldPosition, newPosition, i);   
      pet.className = `meowware-pet ${animationClass}`;
      updatePosition(pet, lerpedPosition.x, lerpedPosition.y);
      
      i += 0.02; // Adjust the step value 

      if (i >= 1 || isMoving == false) {
          clearInterval(interval);
          pet.className = 'meowware-pet-idleStand';
          isMoving = false;
      }
  }, 16); // Adjust the interval (in milliseconds)
}

function lerp(start, end, amt) {
  const lerpedX = (1 - amt) * start.x + amt * end.x;
  const lerpedY = (1 - amt) * start.y + amt * end.y;
  return {x: lerpedX, y: lerpedY };
}
//#endregion
// END OF POSITION/MOVING

//#region ---------------- FOOD/FEEDING ---------------

function spawnFood(foodElement, petElement) {
  console.log("Spawn food");
  document.body.appendChild(foodElement);
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;

  const randX = random(screenWidth);
  const randY = random(screenHeight);

  console.log("Food pos X = " + randX);
  console.log("Food pos Y = " + randY);

  foodElement.style.transform = `translate(${randX}px, ${randY}px)`;

  const foodPos = { x: randX, y: randY};
  const catPos = { x: position.x, y: position.y };
  isMoving = true;
  flip(petElement,foodPos,catPos);
  let i = 0;
  const interval = setInterval(() => {
    const lerpedPosition = lerp(catPos, foodPos, i);
    petElement.classList.add('meowware-pet-walk');
    updatePosition(petElement, lerpedPosition.x, lerpedPosition.y);
    i += 0.002;

    if (i >= 1 || isMoving == false) {
      clearInterval(interval);
      isMoving = false;
      petElement.classList.remove('meowware-pet-walk');
      petElement.classList.add('meowware-pet-idleSit');
      if (document.body.contains(foodElement)) document.body.removeChild(foodElement);
      canMove = true;
    }
  });
}

function textNodesUnder(el) {
  const children = []; // Type: Node[]
  const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);
  while(walker.nextNode()) {
      console.log("1");
      children.push(walker.currentNode);
      //walker.textContent = 'FEED ME';
  }
  return children
}

// function that changes all the text on screen to "FEED ME"
function feedMeText(texts) {
  console.log("FEED ME");
  texts.forEach(element => {
      if (element.textContent != "\n") element.textContent = "FEED ME";
  });
}

// function that removes text from a specific element
function eatTextInElement(ele) {
  element.textContent = "\n"
}

// function that eats the entire page
function eatAllText(texts) {
  texts.forEach(element => {
      element.textContent = "\n";
  });
}

function eatEntirePage() {
  document.querySelectorAll('*').forEach(element => {
      element.remove();
  });
}
//#endregion
// END OF FOOD/FEEDING

//#region ---------------- POPUP STUFF (i think) ------------------
function getExtensionID(callback) {
  chrome.runtime.sendMessage({ type: 'getExtensionID' }, (response) => {
      const extensionID = response;
      callback(extensionID);
  });
}

function constructFilePaths(extensionID) {
  const textFiles = [
      `chrome-extension://${extensionID}/text/gosling.txt`,
      `chrome-extension://${extensionID}/text/greeting.txt`,
      `chrome-extension://${extensionID}/text/browsing.txt`,
      `chrome-extension://${extensionID}/text/feed.txt`,
      `chrome-extension://${extensionID}/text/hungry.txt`,
      `chrome-extension://${extensionID}/text/nap.txt`,
      `chrome-extension://${extensionID}/text/pet.txt`,
      `chrome-extension://${extensionID}/text/play.txt`,
  ];

  const imageFiles = [
      `chrome-extension://${extensionID}/images/gosling.png`,
      `chrome-extension://${extensionID}/images/cat1.png`,
      `chrome-extension://${extensionID}/images/cat2.png`,
      `chrome-extension://${extensionID}/images/cat3.png`,
      `chrome-extension://${extensionID}/images/cat4.png`,
      `chrome-extension://${extensionID}/images/cat5.png`,
      `chrome-extension://${extensionID}/images/cat6.png`,
      `chrome-extension://${extensionID}/images/cat7.png`,
      `chrome-extension://${extensionID}/images/cat8.png`,
      `chrome-extension://${extensionID}/images/cat9.png`,
  ];

  return { textFiles, imageFiles };
}

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function displayTextPopup(text) {
  const popup = document.createElement('div');
  popup.classList.add('popup');

  const closeButton = document.createElement('span');
  closeButton.classList.add('popup-close');
  closeButton.innerHTML = '&times;';
  closeButton.addEventListener('click', () => {
      document.body.removeChild(popup);
  });
  popup.appendChild(closeButton);

  const textElement = document.createElement('p');
  textElement.textContent = text;
  popup.appendChild(textElement);

  document.body.appendChild(popup);

  setTimeout(() => {
    if (document.body.contains(popup)) document.body.removeChild(popup);
  }, 5000);
}

function displayImagePopup(imagePath) {
  const popup = document.createElement('div');
  popup.classList.add('popup');

  const closeButton = document.createElement('span');
  closeButton.classList.add('popup-close');
  closeButton.innerHTML = '&times;';
  closeButton.addEventListener('click', () => {
      document.body.removeChild(popup);
  });
  popup.appendChild(closeButton);

  const imageElement = document.createElement('img');
  imageElement.src = imagePath;
  popup.appendChild(imageElement);

  document.body.appendChild(popup);

  setTimeout(() => {
    if (document.body.contains(popup)) document.body.removeChild(popup);
  }, 5000);
}

function displayFile(filePath) {
  if (filePath.endsWith('.txt')) {
    fetch(filePath)
        .then(response => response.text())
        .then(text => {
          displayTextPopup(text);
        })
        .catch(error => console.error('Error loading text file:', error));
  } else if (filePath.endsWith('.png')) {
    displayImagePopup(filePath);
  } else {
    console.error('Unsupported file format:', filePath);
  }
}

function randomTime(minMilliseconds, maxMilliseconds){
  return Math.floor(Math.random() * (maxMilliseconds - minMilliseconds + 1) + minMilliseconds);
}

getExtensionID((extensionID) => {
  const { textFiles, imageFiles } = constructFilePaths(extensionID);

  function displayRandomFile() {
      const randomFilePath = getRandomElement([...textFiles, ...imageFiles]);
      displayFile(randomFilePath);
  }

  setInterval(displayRandomFile, randomTime(15000, 60000));
});
//#endregion
// END OF POPUP STUFF

//#region ----------------------- STATS -----------------------
function updateStats() {
    if (hunger >= 10 || attention >= 10) {
      hunger += 10
      attention += 10
    } else {
      if (hunger < 10) {
        attention += 10
      }
      if (attention < 10) {
        hunger += 10
      }
    }
}
//#endregion
// END OF STATS
   
//#region ---------------- SWATTING ----------------------
document.addEventListener('mousemove', function(e) {
  const mouseX = e.clientX; // Mouse position X
  const mouseY = e.clientY; // Mouse position Y
  checkSwat(mouseX, mouseY);
  WILL_KNOCK = false;
});

function checkSwat(mouseX, mouseY) {
  const swatRange = 30; // Distance in pixels to trigger swatting
  const distance = Math.sqrt(Math.pow(mouseX - position.x, 2) + Math.pow(mouseY - position.y, 2));
  if (distance < swatRange && !isSwatting) {
      startSwatting();
  } else if (distance >= swatRange && isSwatting) {
      stopSwatting();
  }
}

function startSwatting() {
  const pet = document.querySelector('.meowware-pet');
  pet.classList.add('meowware-pet-swat'); // Ensure this class triggers the swatting animation
  isSwatting = true;
}

function stopSwatting() {
  const pet = document.querySelector('.meowware-pet');
  pet.classList.remove('meowware-pet-swat');
  isSwatting = false;
}


//#endregion
// END OF SWATTING

//#region ---------------- SCRATCHING --------------------
function scratchScreen(pet) {
  canMove = false;
  console.log("fucking scratching");
  // Plays the scratch animation once
  pet.classList.add('meowware-pet-scratch');
  
  setTimeout(() => {
    // Remove the scratch animation class
    pet.classList.remove('meowware-pet-scratch');
    canMove = true;
  }, 2400);
  
}

//#endregion
//END OF SCRATCHING

//#region ------------------- KNOCKING ---------------------
document.addEventListener('mousemove', function(e) {
  const mouseX = e.clientX; // Mouse position X
  const mouseY = e.clientY; // Mouse position Y
  checkSwat(mouseX, mouseY);
  //console.log("knocking is false!");
  WILL_KNOCK = false;
});
function check_if_knock() {
    if (WILL_KNOCK && attention > 80) {
        play_knock();
    }
    console.log("knocking is true");
    WILL_KNOCK = true;
}
function play_knock() {
    var audio = new Audio('audio/person-knocking-18474.mp3');
    audio.play();
}
//#endregion
// END OF KNOCKING

//#region ------------------- ZOOM ---------------------

function startZoom() {
    const pet = document.querySelector('.meowware-pet');
    pet.classList.add('meowware-zoom');
    isZoom = true;
    
    setInterval(() => {
        stopZoom();
    }, 30000);
}

function stopZoom() {
    const pet = document.querySelector('.meowware-pet');
    pet.classList.remove('meowware-zoom');
    isZoom = false;
}
//#endregion
// END OF KNOCKING

//#region --------------------- PLAY ---------------------
// Flag to see if the toy is locked onto the cursor or not
let isToyLocked = false;

function moveToyWithCursor(event) {
    // Check if the toy element exists
    const toy = document.querySelector('.toy');

    // Update the position of the toy based on the cursor position
    toy.style.left = `${event.clientX}px`;
    toy.style.top = `${event.clientY}px`;
}

// Add toy to the mouse cursor position
function addToyToMouse(event) {
    // Check if toys present
    const existingToy = document.querySelector('.toy');
    if (existingToy) {
        // Remove toy if present
        existingToy.remove();
        return;
    }

    const toy = document.createElement('div');
    toy.classList.add('toy');
    toy.style.position = 'absolute';
    toy.style.left = `${event.clientX}px`;
    toy.style.top = `${event.clientY}px`;
    toy.style.width = '50px'; 
    toy.style.height = '50px'; 
    toy.style.borderRadius = '50%';
    toy.style.backgroundColor = 'green'; 

    document.body.appendChild(toy);

    // Toggle the flag to lock/unlock the toy onto the cursor
    isToyLocked = !isToyLocked;

    // Move the cat towards the toy when the toy is added and the cat is in play mode
    if (isToyLocked) {
        moveCatTowardsToy();
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Access the play button element
    const playButton = document.getElementById('playMe');

    // Add event listener for the play button
    playButton.addEventListener('click', () => {
        // Toggle the flag to lock/unlock the toy onto the cursor
        isToyLocked = !isToyLocked;
    });

    // Add event listener for document click to add toy to mouse cursor position
    document.addEventListener('click', (event) => {
        if (isToyLocked) {
            addToyToMouse(event);
        }
    });

    // Add event listener for mousemove when the toy is locked
    document.addEventListener('mousemove', (event) => {
        if (isToyLocked) {
            moveToyWithCursor(event);
        }
    });
});


function moveCatTowardsToy() {
    const cat = document.querySelector('.meowware-pet');
    const toy = document.querySelector('.toy');

    // Get the position of the cat and toy
    const catPosition = {
        x: position.x,
        y: position.y
    };
    const toyPosition = {
        x: toy.offsetLeft,
        y: toy.offsetTop
    };

    // Calculate the distance between the cat and toy
    const distance = Math.sqrt(Math.pow(toyPosition.x - catPosition.x, 2) + Math.pow(toyPosition.y - catPosition.y, 2));

    // Calculate the step for the cat to move towards the toy
    const step = 2;

    // Move the cat towards the toy until they are close enough
    if (distance > step) {
        // Calculate the next position for the cat
        const deltaX = toyPosition.x - catPosition.x;
        const deltaY = toyPosition.y - catPosition.y;
        const angle = Math.atan2(deltaY, deltaX);
        const nextX = catPosition.x + step * Math.cos(angle);
        const nextY = catPosition.y + step * Math.sin(angle);

        // Update the position of the cat
        updatePosition(cat, nextX, nextY);

        // Call moveCatTowardsToy recursively in the next frame
        requestAnimationFrame(moveCatTowardsToy);
    } else {
        // If the cat is close enough to the toy, remove the toy
        if (document.body.contains(toy)) {
            document.body.removeChild(toy);
            // Set canMove back to true so the pet can move freely again
            canMove = true;
        }
    }
}

//#endregion
// END OF PLAY
