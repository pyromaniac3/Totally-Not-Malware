// Starter code provided by https://github.com/tanhauhau/browser-pet/tree/master
const position = {
    x: 0,
    y: 0,
};

function updatePosition(pet, x, y) {
    pet.style.left = (position.x = x) + 'px';
    pet.style.top = (position.y = y) + 'px';
}

function random(max) {
  return Math.floor(Math.random() * max);
}
function lerp(start, end, amt) {
  const lerpedX = (1 - amt) * start.x + amt * end.x;
  const lerpedY = (1 - amt) * start.y + amt * end.y;
  return { x: lerpedX, y: lerpedY };
}

function repositionPet(pet) {
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;

  // Calculate random positions within the screen dimensions
  const newPosition = { x: random(screenWidth), y: random(screenHeight) };
  const oldPosition = { x: position.x, y: position.y };

  let i = 0;
  const interval = setInterval(() => {
      const lerpedPosition = lerp(oldPosition, newPosition, i);
      updatePosition(pet, lerpedPosition.x, lerpedPosition.y);
      i += 0.02; // Adjust the step value 

      if (i >= 1) {
          clearInterval(interval);
      }
  }, 16); // Adjust the interval (in milliseconds)
}
function onload() {
    const pet = document.createElement('div');
    pet.classList.add('meowware-pet');
    document.body.appendChild(pet);

    // Randomly reposition the pet every few seconds
    setInterval(() => {
      repositionPet(pet);
    }, 3000); // Adjust the interval (in milliseconds) as needed


    // Creating a second div to be able to Ctrl+F in DOM.
    const identifier_div = document.createElement('div');
    identifier_div.classList.add('meowware-pet');
    pet.appendChild(identifier_div);

    textEles = textNodesUnder(document);
    //feedMeText(textEles);
    //eatAllTextPage(textEles);
    //eatEntirePage();
    console.log("Attached identifier to be able to more easily attach.")
}
window.addEventListener('load', onload);

function textNodesUnder(el) {
    const children = []; // Type: Node[]
    const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);
    while(walker.nextNode()) {
        console.log("1");
        children.push(walker.currentNode);
        //walker.textContent = 'FEED ME';
    }
    return children
}

// function that changes all the text on screen to "FEED ME"
function feedMeText(texts) {
    console.log("FEED ME");
    texts.forEach(element => {
        if (element.textContent != "\n") element.textContent = "FEED ME";
    });
}

// function that removes text from a specific element
function eatTextInElement(ele) {
    element.textContent = "\n"
}

// function that eats the entire page
function eatAllText(texts) {
    texts.forEach(element => {
        element.textContent = "\n";
    });
}

function eatEntirePage() {
    document.querySelectorAll('*').forEach(element => {
        element.remove();
    });
}
